import asyncio
from logging import log, INFO
from random import randint
from loader import postcards_db, bot, staff
from utils.email_sender import send_email_photo
from utils.utilities import get_bot_info

# list_of_ids = [68]


async def sender_from_db():
    postcard_count = await postcards_db.count_postcards()
    log(INFO, f"{postcard_count=}")
    for item in range(postcard_count):
        await asyncio.sleep(randint(10, 15))
        postcard = await postcards_db.select_postcard(item + 1)
        log(INFO, f"{postcard.id=}")
        user_who_send = await staff.select_employee(id=postcard.user_id_who_sent)
        user_to_send = await staff.select_employee(id=postcard.user_id_to_sent)
        file = await bot.download_file_by_id(postcard.file_id)
        me = await get_bot_info()
        if user_who_send is not None:
            if user_to_send.telegram_id is not None:
                try:
                    await bot.send_photo(
                        user_to_send.telegram_id,
                        postcard.file_id,
                        caption=f"{user_who_send.full_name()} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"
                    )
                    log(INFO, f"Success send message [{user_to_send.telegram_id}]")
                except:
                    log(INFO, f"Failed send message [{user_to_send.telegram_id}] [{postcard.file_id}]")
            if user_to_send.email is not None:
                try:
                    await send_email_photo(
                        user_to_send.email,
                        '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
                        f"{user_who_send.full_name()} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.\n"
                        f"–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–∞—Å–∏–±–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, "
                        f"–∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∑–¥–µ—Å—å >> https://t.me/{me.username}/",
                        file.getbuffer().tobytes()
                    )
                    log(INFO, f"Success send email [{user_to_send.email}]")
                except:
                    log(INFO, f"Failed send email [{user_to_send.email}]")
        else:
            if user_to_send.telegram_id is not None:
                try:
                    await bot.send_photo(
                        user_to_send.telegram_id,
                        postcard.file_id,
                        caption=f"–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å"
                    )
                    log(INFO, f"Success send message [{user_to_send.telegram_id}]")
                except:
                    log(INFO, f"Failed send message [{user_to_send.telegram_id}] [{postcard.file_id}]")
            if user_to_send.email is not None:
                try:
                    await send_email_photo(
                        user_to_send.email,
                        '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
                        f'–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å.\n'
                        f'–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–∞—Å–∏–±–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, '
                        f'–∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∑–¥–µ—Å—å >> https://t.me/{me.username}/',
                        file.getbuffer().tobytes()
                    )
                    log(INFO, f"Success send email [{user_to_send.email}]")
                except:
                    log(INFO, f"Failed send email [{user_to_send.email}]")
    # await notify_admins(f"–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {postcard_count} –æ—Ç–∫—Ä—ã—Ç–æ–∫")


# async def file_sender(file, message):
#     users_count = await db.count_users()
#     log(INFO, f"{users_count=}")
#     users = await db.select_all_users()
#     for user in users:
#         if user['id'] in list_of_ids:
#             await asyncio.sleep(randint(10, 15))
#             log(INFO, f"{user=}")
#             with open(file, "rb") as image:
#                 f = image.read()
#                 b = bytearray(f)
#             me = await get_bot_info()
#             if user is not None:
#                 if user['telegram_id'] is not None:
#                     try:
#                         message = message.replace(":-)", "üôÇ")
#                         await bot.send_photo(user['telegram_id'], b,
#                                              caption=f"{message}")
#                         log(INFO, f"Success send message [{user['telegram_id']}]")
#                     except:
#                         log(INFO, f"Failed send message [{user['telegram_id']}]")
#                 if user['email'] is not None:
#                     try:
#                         await send_email_photo(user['email'],
#                                                '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å',
#                                                f'{message}.\n'
#                                                f'–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–ø–∞—Å–∏–±–∫–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –∑–¥–µ—Å—å >> https://t.me/{me.username}/',
#                                                b)
#                         log(INFO, f"Success send email [{user['email']}]")
#                     except:
#                         log(INFO, f"Failed send email [{user['email']}]")
#         else:
#             log(INFO, f'current id [{user["id"]}] not in list')
#     await notify_admins(f"–û—Ç–∫—Ä—ã—Ç–∫–∞ {file} –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {users_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")


# file1 = "sender_postcards/1.jpeg"
# file2 = "sender_postcards/2.jpeg"
# file3 = "sender_postcards/3.jpeg"
# file4 = "sender_postcards/4.jpeg"
# message4 = """
# –ö–æ–ª–ª–µ–≥–∏! –°—á–∞—Å—Ç—å–µ - –±—ã—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞!! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–¥–µ–ª–∞–ª–∞ —Ç–æ, —á—Ç–æ —Å–ø—É—Å—Ç—è –º–Ω–æ–≥–æ –ª–µ—Ç –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –Ω–∏ —Ç–æ —á—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, –¥–∞–∂–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç—Å—è.
# –•–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—ã –¥–ª—è –º–µ–Ω—è –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ª–ª–µ–≥–∏.. –ö—Ç–æ-—Ç–æ –∏–∑ –≤–∞—Å —Å—Ç–∞–ª –º–Ω–µ –¥—Ä—É–≥–æ–º, –∫—Ç–æ-—Ç–æ - –æ–ø—ã—Ç–Ω—ã–º –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–æ–º, —É –∫–æ–≥–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ –µ—Å—Ç—å —á–µ–º—É –ø–æ—É—á–∏—Ç—å—Å—è –∏ –ø–µ—Ä–µ–Ω—è—Ç—å –æ–ø—ã—Ç. –í –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –µ—Å—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –ª—é–¥–∏, –æ–∫—Ä—É–∂–∏–≤ —Å–µ–±—è –∫–æ—Ç–æ—Ä—ã–º–∏, –ª—é–±–æ–π —á–µ–ª–æ–≤–µ–∫ –±—É–¥–µ—Ç —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥–æ–º—É –¥–Ω—é –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏ –ª—é–±–æ–µ –¥–µ–ª–æ –ø–æ –ø–ª–µ—á—É.
# –í–∞—Å —Å—Ç–∞–ª–æ —Ç–∞–∫ –º–Ω–æ–≥–æ, —á—Ç–æ —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —É–∂–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –°–µ–≥–æ–¥–Ω—è —Ö–æ—á—É —Å–∫–∞–∑–∞—Ç—å —Å–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã —Ç–∞–∫–∏–µ –∫–∞–∫–∏–µ –µ—Å—Ç—å. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º, –∑–∞ —á—É–≤—Å—Ç–≤–æ –ø–ª–µ—á–∞, –∑–∞ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å –∏ –Ω–µ–±–µ–∑—Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫ –Ω–∞—à–µ–º—É –æ–±—â–µ–º—É –¥–µ–ª—É.
# –ñ–µ–ª–∞—é –≤—Å–µ–º –Ω–∞–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö –∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ –æ—Å–æ–∑–Ω–∞—Ç—å , —á—Ç–æ —Ü–µ–Ω–Ω–æ—Å—Ç—å –¥–∞–∂–µ –Ω–µ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö –∏ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—è—Ö –º—ç—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö –Ω–∞—á–∞–ª—å–Ω–∏–∫–æ–≤, –∞ —Ü–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º –∏ —Å–∞–º–∏–º —Å–æ–±–æ–π –≤ –∫–æ–º–∞–Ω–¥–µ! –í –ª—É—á—à–µ–π –∫–æ–º–∞–Ω–¥–µ! –ê –µ—â–µ –º—ã –º–µ–Ω—è–µ–º –≥–æ—Ä–æ–¥, –Ω–∞–¥–µ—é—Å—å, –∫ –ª—É—á—à–µ–º—É :-)
# --
# –ï–≤–≥–µ–Ω–∏–π –ö–æ–º–∞—Ä–µ–Ω–∫–æ"""



async def main():
    # await file_sender(file4, message4)
    await sender_from_db()
    # await file_sender(file1, '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å')
    # await file_sender(file2, '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å')
    # await file_sender(file3, '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å')
    # taskA = loop.create_task(sender_from_db())
    # taskB = loop.create_task(file_sender(file1, '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'))
    # taskC = loop.create_task(file_sender(file2, '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'))
    # taskD = loop.create_task(file_sender(file3, '–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–∞—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å'))
    # taskE = loop.create_task(file_sender(file4, message4))
    # await asyncio.wait([taskA, taskB, taskC, taskD, taskE])


if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
        loop.close()
    except:
        pass
